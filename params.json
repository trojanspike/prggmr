{"tagline":"The event library that will change the way you write PHP forever...","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Prggmr","body":"prggmr is an event processing engine for PHP 5.4. designed to be lightweight, \r\nfast and very simple to use.\r\n\r\n## Global events usage\r\n\r\n### Registering handles\r\n\r\n```php\r\n<?php\r\nprggmr\\handle(function(){\r\n    echo \"The light is green go!\";\r\n}, 'light.green');\r\n```\r\n\r\n### Dispatching signals\r\n\r\n```php\r\n<?php\r\nprggmr\\signal('light.green');\r\n```\r\n\r\n### Signal interruption before handle execution\r\n\r\n```php\r\n<?php\r\nprggmr\\signal_interrupt(function(){\r\n    echo \"Inserting some data into the event for handles..\";\r\n    $this->data = \"HelloWorld\";\r\n}, 'light.green', prggmr\\Engine::INTERRUPT_PRE);\r\n```\r\n\r\n### Signal interruption after handle execution\r\n\r\n```php\r\n<?php\r\nprggmr\\signal_interrupt(function(){\r\n    echo \"Checking what happened in the handle\";\r\n}, 'light.green', prggmr\\Engine::INTERRUPT_POST);\r\n```\r\n\r\n### Event history\r\n\r\n```php\r\n<?php\r\nvar_dump(prggmr\\event_history());\r\n```\r\n\r\n## Engine instance usage\r\n\r\n### Registering a prggmr\\Engine\r\n\r\n```php\r\n<?php\r\n$engine = new prggmr\\Engine();\r\n```\r\n\r\n### Registering handles\r\n\r\n```php\r\n<?php\r\n$engine->handle(function(){\r\n    echo \"The light is green go!\";\r\n}, 'light.green');\r\n```\r\n\r\n### Dispatching signals\r\n\r\n```php\r\n<?php\r\n$engine->signal('light.green');\r\n```\r\n\r\n### Signal interruption before handle execution\r\n\r\n```php\r\n<?php\r\n$engine->signal_interrupt(function(){\r\n    echo \"Inserting some data into the event for handles..\";\r\n    $this->data = \"HelloWorld\";\r\n}, 'light.green', prggmr\\Engine::INTERRUPT_PRE);\r\n```\r\n\r\n### Signal interruption after handle execution\r\n\r\n```php\r\n<?php\r\n$engine->signal_interrupt(function(){\r\n    echo \"Checking what happened in the handle\";\r\n}, 'light.green', prggmr\\Engine::INTERRUPT_POST);\r\n```\r\n\r\n### Event history\r\n\r\n```php\r\n<?php\r\nvar_dump($engine->event_history());\r\n```\r\n\r\n## Installation\r\n\r\nDepending on your needs prggmr can be installed using two different methods.\r\n\r\n### Composer\r\n\r\nInclude the following in your ```composer.json``` file.\r\n\r\n```JSON\r\n{\r\n    \"require\": {\r\n        \"prggmr/prggmr\": \"1.*.*\"\r\n    }\r\n}\r\n```\r\n\r\nRun the installer.\r\n\r\n    $ curl -s http://getcomposer.org/installer | php\r\n    $ php composer.phar install\r\n\r\nAnd include the library\r\n\r\n```php\r\n<?php\r\n\r\nrequire_once 'vendor/prggmr/prggmr/src/prggmr.php';\r\n```\r\n\r\n### Global system installation\r\n\r\nThis method will install prggmr to your php include path.\r\n\r\nDownload the latest release and navigate a terminal to the extract directory.\r\n\r\n    # cd into the prggmr library so you see the README, LICENSE etc..\r\n    $ cd path/to/prggmr/extraction\r\n    # Get include path\r\n    $ php -r \"echo get_include_path();\"\r\n    # My output .:/usr/local/lib/php\r\n    # Copy prggmr to lib\r\n    $ sudo cp -Rf * /usr/local/lib/php/prggmr/*\r\n    # Copy bin\r\n    $ sudo ln -ls /usr/local/lib/php/prggmr/bin/prggmr /usr/bin/\r\n    # Test\r\n    $ prggmr -v\r\n    # Result\r\n    $ prggmr version 1.2.3\r\n\r\nAnd include the library\r\n\r\n```php\r\n<?php\r\n\r\nrequire_once 'prggmr/src/prggmr.php';\r\n```\r\n\r\n## Documentation\r\n\r\nDocumentation is available at [prggmr.org](http://www.prggmr.org)\r\n\r\n## Mailing List\r\n\r\nThe prggmr mailing list is located here [mailing list](https://groups.google.com/forum/?fromgroups#!forum/prggmr).\r\n\r\n## Versions\r\n\r\nprggmr uses [semver](http://semver.org) you should too.\r\n\r\n## Signals Roadmap\r\n\r\nThe following signals are on the development roadmap.\r\n\r\n### CRON\r\n\r\nCRON based time signals based on http://docs.oracle.com/cd/E14592_01/doc.10142/e14611/cron_expressions.htm\r\n\r\n#### Example\r\n\r\n```php\r\n<?php\r\n\r\n// every 15 minutes\r\nprggmr\\handle(function(){\r\n}, new prggmr\\signal\\time\\Cron('*/15 * * * *'));\r\n\r\n// 23:00:00 every weekday night\r\nprggmr\\handle(function(){\r\n} new prggmr\\signal\\time\\Cron('0 23 ? * MON-FRI'));\r\n\r\n// 10:15 everyday\r\nprggmr\\handle(function(){\r\n}, new prggmr\\signal\\time\\Cron('0 15 10 * * ?'));\r\n```\r\n\r\n### Event Stream Server\r\n\r\nW3C Event-Stream (Specs)[http://dev.w3.org/html5/eventsource/].\r\n\r\n#### Example\r\n\r\n```php\r\n<?php\r\n\r\n$socket = new \\prggmr\\signal\\http\\EventStream();\r\n\r\nhandle(function($bytes){\r\n    // do something\r\n}, $socket->read());\r\n\r\nhandle(function($bytes){\r\n    // do something\r\n}, $socket->write());\r\n```\r\n\r\n### Non-Blocking Asynchronous Signal I/O\r\n\r\nThis will allow for non-blocking event driven I/O using file descriptors or \r\nnetworking socktes.\r\n\r\n#### Example\r\n    \r\n```php\r\n<?php\r\n\r\n$socket = new \\prggmr\\signal\\io\\Socket('127.0.0.1', 8888);\r\n\r\nhandle(function($bytes){\r\n    echo \"Read bytes\";\r\n    echo $bytes;\r\n}, $socket->read(1024));\r\n\r\nhandle(function($bytes){\r\n    echo \"Writing bytes\";\r\n    echo $bytes;\r\n}, $socket->write());\r\n\r\nhandle(function($client){\r\n    echo \"Client connected\";\r\n    echo $client->ip_address;\r\n}, $socket->connect());\r\n\r\nhandle(function($client){\r\n    echo \"Client disconnected\";\r\n    echo $client->ip_address;\r\n}, $socket->disconnect());\r\n```"}